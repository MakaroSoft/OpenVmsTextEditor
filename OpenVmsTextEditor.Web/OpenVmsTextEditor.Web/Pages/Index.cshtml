@page
@model OpenVmsTextEditor.Web.Pages.IndexModel
@using System.Text.Json
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewBag.Title = "OpenVmsEditor";
    Layout = "_EditorLayout";
    var returnUrl = $"{Request.PathBase}{Request.Path}{Request.QueryString}";
    var username = User.Identity?.Name ?? "Guest";
}
@section Styles
{
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css" integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ" crossorigin="anonymous" asp-append-version="true">
    <style>
        body {
            margin-bottom: 0;
        }

        td {
            white-space: nowrap;
        }

        .mainDiv {
            height: calc(100vh - 100px);
        }

        .flex {
            display: flex;
            flex-direction: row;
        }

        .cm-editor {
            height: calc(100vh - 190px);
            border-left: 1px solid #ddd;
            border-right: 1px solid #ddd;
            border-bottom: 1px solid #ddd;
        }

        .cm-scroller {
            overflow: auto;
        }

        .aRow:hover {
            cursor: pointer;
            background-color: lightgray;
        }

        #bodyBlock {
            position: fixed;
            display: none;
            width: 100%;
            height: 100%;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 2;
        }

        .modal-backdrop {
            background-color: rgba(0, 0, 0, 0.1);
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 2;
        }
    </style>
}
@section Scripts
{
    <script src="~/lib/split.js/split.min.js" asp-append-version="true"></script>
    <script src="~/lib/jsviews/jsviews.min.js" asp-append-version="true"></script>
    <script src="~/lib/gasparesganga-jquery-loading-overlay/dist/loadingoverlay.min.js" asp-append-version="true"></script>
    <script src="~/js/openVmsEditor.bundle.js" asp-append-version="true"></script>

    <script id="diskTemplate" type="text/x-jsrender">
        {{for #data}}
        <a class="aDisk dropdown-item" href="#">{{:#data}}</a>
        {{/for}}
    </script>

    <script id="recentsTemplate" type="text/x-jsrender">
        {{for #data}}
        <li><a class="dropdown-item aGoto" href="#">{{:Name}}</a></li>
        {{/for}}
    </script>

    <script id="folderTemplate" type="text/x-jsrender">
        {{for #data}}
        <tr class="aRow">
            <td>
                {{if Dir}}
                <a class="aFolder" href="#">{{:Name}}</a>
                {{else}}
                <span {{noVer:Name}}>{{:Name}}</span>
                {{/if}}
            </td>
            <td></td>
        </tr>
        {{/for}}
    </script>

    <script id="fileTemplate" type="text/x-jsrender">
        <tr class="aRow">
            <td>
                <span {{noVer:Name}}>{{:Name}}</span>
            </td>
            <td></td>
        </tr>
    </script>

    <script id="breadCrumbTemplate" type="text/x-jsrender">
        {{for #data}}
        <li class="breadcrumb-item"><a data-index="{{:#getIndex()}}" class="aCrumb" href="#">{{:#data}}</a></li>
        {{/for}}
    </script>

    <script id="tabTemplate" type="text/x-jsrender">

        <!-- Nav tabs -->
        <ul id="myTabs" class="nav nav-tabs">
            {^{for Tabs}}
            <li class="nav-item">
                <a class="nav-link" id="{{:TabId}}-tab" data-bs-toggle="tab" data-bs-target="#{{:TabId}}">{^{modCode:Modified}}{^{:Name}} <i class="aCloseButton far fa-window-close"></i></a>
            </li>
            {{/for}}
        </ul>

        <div id="myTabsContent" class="tab-content">
            {^{for Tabs}}
            <div id="{{:TabId}}" class="tab-pane">
                <div></div><div>{^{:FullName}}</div>
            </div>
            {{/for}}
        </div>
    </script>


    <script>
        const apiBase = '@Url.Content("~/api/explorer")';
        $.views.converters("modCode",
            function(val) {
                if (val === true) {
                    return "*";
                }
                return "";
            });

        $.views.converters("noVer",
            function(text) {
                const index = text.indexOf(";");
                if (index !== -1) {
                    return `nameNoVer='${text.substring(0, index)}'`;
                }
                    return `nameNoVer='${text}'`;
            });

        let _fileName = null;
        const GUTTER_SIZE = 20;
        let _compareFirst = null;
        let tabCount = 1;
        let currentTabIndex = 0;
        let currentTabData = null;
        let _$fileTd = null
        const _notification = new MakaroSoft.CommonNotification();
        const _dialog = new MakaroSoft.CommonDialog( { required: true });

        let includeValue = "@(Model.Include ?? "")";
        let excludeValue = "@(Model.Exclude ?? "")";
        let gotoValue = "";

        const disks = @Html.Raw(JsonSerializer.Serialize(Model.VmsEditor.Disks));
        let files = @Html.Raw(JsonSerializer.Serialize(Model.VmsEditor.Files));
        const _recents = [];

        disks.contains = function (name) {
            return this.some(function (diskName) {
                return diskName.toLowerCase() === name.toLowerCase();
            });
        };
        _recents.contains = function (newObject) {
            return this.some(function (obj) {
                return obj.Name === newObject.Name;
            });
        };

        const basePath = window.location.pathname.split('/')[1];

        const breadCrumb = @Html.Raw(JsonSerializer.Serialize(Model.VmsEditor.BreadCrumb));
        
        const tabsObject = {
            "Tabs": [],
            "RecentOrder": []
        };

        const fileTemplate = $.templates("#fileTemplate");

        const diskTemplate = $.templates("#diskTemplate");
        diskTemplate.link("#myDisks", disks);

        const folderTemplate = $.templates("#folderTemplate");
        let htmlOutput = folderTemplate.render(files);
        
        const $myFiles = $("#myFiles");
        $myFiles.html(htmlOutput);

        const recentsTemplate = $.templates("#recentsTemplate");
        htmlOutput = recentsTemplate.render(_recents);

        const $gotos = $("#gotos");
        $gotos.html(htmlOutput);

        const breadCrumbTemplate = $.templates("#breadCrumbTemplate");
        breadCrumbTemplate.link("#myBreadCrumb", breadCrumb);

        const tabTemplate = $.templates("#tabTemplate");
        tabTemplate.link("#myTabArea", tabsObject);

        const $popupCompareTo = $("#popupCompareTo");
        const $compareBtn = $("#compareBtn");
        const $compareUnsavedBtn = $("#compareUnsavedBtn");
        const $myTabs = $("#myTabs");
        const $include = $("#include");
        const $exclude = $("#exclude");
        const $goto = $("#goto");
        const $btnGoto = $("#btn-goto");
        const $showHistory = $("#showHistory");

        $include.on('blur',
            function () {
                if ($include.val() !== includeValue) {
                    includeValue = $include.val();
                    const fullName = breadCrumb.join("/");
                    changeFolder(fullName);
                }
            });

        $include.on('keyup',
            function(e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    if ($include.val() !== includeValue) {
                        includeValue = $include.val();
                        const fullName = breadCrumb.join("/");
                        changeFolder(fullName);
                    }
                }
            });

        $exclude.on('blur',
            function () {
                if ($exclude.val() !== excludeValue) {
                    excludeValue = $exclude.val();
                    const fullName = breadCrumb.join("/");
                    changeFolder(fullName);
                }
            });

        $exclude.on('keyup',
            function (e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    if ($exclude.val() !== excludeValue) {
                        excludeValue = $exclude.val();
                        const fullName = breadCrumb.join("/");
                        changeFolder(fullName);
                    }
                }
            });




        $goto.on('blur',
            function () {
                if ($goto.val() !== gotoValue) {
                    gotoValue = $goto.val();
                    handleGoto(gotoValue);
                }
            });

        $goto.on('keyup',
            function (e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    gotoValue = $goto.val();
                    handleGoto(gotoValue);
                }
            });

        $btnGoto.click(function () {
            gotoValue = $goto.val();
            handleGoto(gotoValue);
        });

        function isDisk(possibleDisk) {
            return disks.contains(possibleDisk);
        }

        function handleGoto(folder) {
            if (folder === "") return;

            if (folder.startsWith("/")) {
                // tack on the current drive name
                folder = breadCrumb[0] + folder;
            } else {
                const folderParts = folder.split("/");
                if (folderParts.length === 0) return;
                const possibleDisk = folderParts[0];
                if (!isDisk(possibleDisk)) {
                    const fullPath = breadCrumb.join("/");
                    folder = fullPath + "/" + folder;
                }
            }

            // todo handle different goto folder scenarios
            changeFolder(folder);
        }

        $showHistory.on('change',
            function () {
                const fullPath = breadCrumb.join("/");
                changeFolder(fullPath);
            });

        $myTabs.on("click",
            ".aCloseButton",
            function(event) {
                event.stopPropagation();
                const dataItem = $.view(this).data;
                const index = $.view(this).index;
                if (dataItem.Modified) {
                    if (dataItem.Name === "New!") {
                        removeTabNew(index, dataItem);
                    } else {
                        removeTabExisting(index, dataItem);
                    }
                } else {
                    removeTab(index);
                }
            });

        function removeTabExisting(index, dataItem) {
            _dialog.show(`Remove Tab For ${dataItem.Name}`, "Do you want to save your changes first?", ["Yes","No","Cancel"], function(e) {
                _dialog.close();
                if (e === "Yes") {
                    saveTab(index); // TODO async!!
                    removeTab(index);
                }
                if (e === "No") {
                    removeTab(index);
                }
            });
        }

            function removeTabNew(index, dataItem) {
                _dialog.show(`Remove Tab For ${dataItem.Name}`, "Enter the file name to save as <input id='btnRemoveNewTab' class='form-control' placeHolder='filename.filetype' type='text'/>", ["Save","Remove","Cancel"], function(e) {
                if (e === "Save") {
                    const filename = $("#btnRemoveNewTab").val();
                    if (filename === "" || filename === "New!") {
                        _notification.show("Invalid file name","error");
                        return;
                    }
                    _dialog.close();

                    //filename += ";1";

                    // set up the new file name
                    const tabData = tabsObject.Tabs[index];
                    $.observable(tabData).setProperty("Name", filename);
                    $.observable(tabData).setProperty("FullName", `${tabData.Path}/${filename}`);

                    saveTab(index); // TODO async!!
                    removeTab(index);
                }
                if (e === "Remove") {
                    _dialog.close();
                    removeTab(index);
                }
                if (e === "Cancel") {
                    _dialog.close();
                }
            });
        }

        $("#saveBtn").click(function() {
            if (!currentTabData.Modified) return;

            if (currentTabData.Name === "New!") {
                doSaveAs();
                return;
            }
            _dialog.show("Save Changes", "Do you want to save your changes?", ["Yes", "Compare", "Cancel"], async function(e) {
                _dialog.close();
                if (e === "Yes") {
                    saveTab(currentTabIndex);
                }
                if (e === "Compare") {
                    await DoCompareUnsavedAsync();
                }
            });


        });
        $("#saveAsBtn").click(function () {
            doSaveAs();
        });

        $compareBtn.click(async function () {
            try {
                const lastTwo = tabsObject.RecentOrder.slice(-2);

                const index1 = findTabIndex(lastTwo[0]);
                const index2 = findTabIndex(lastTwo[1]);
                const tabData1 = tabsObject.Tabs[index1];
                const tabData2 = tabsObject.Tabs[index2];

                const content1 = tabData1.View.state.doc.toString();
                const content2 = tabData2.View.state.doc.toString();
                await compareRecentAsync(tabData1.FullName, tabData2.FullName, content1, content2);
                
            } catch (err) {
                alert('Error comparing recent tabs: ' + err.message);
            }
        });
        
        $compareUnsavedBtn.click(async function () {
            await DoCompareUnsavedAsync();
        });

        $("#newBtn").click(function () {
                addNewFile("New!");
        });
        
        async function DoCompareUnsavedAsync() {
            const tabData = tabsObject.Tabs[currentTabIndex];

            const data = tabData.View.state.doc.toString();
            await compareUnsavedAsync(tabData.FullName, data);
            
        }

        function findTabIndex(tabId) {
            if (!tabsObject || !Array.isArray(tabsObject.Tabs)) return -1;

            return tabsObject.Tabs.findIndex(tab => tab.TabId === tabId);
        }
        
        function doSaveAs() {
            if (!currentTabData.Modified) return;
            _dialog.show("Save As", "Enter the file name to save as <input id='btnDoSaveFileName' class='form-control' placeHolder='filename.filetype' type='text'/>", ["Save","Cancel"], 
            function(e) {
                if (e === "Save") {
                    const filename = $("#btnDoSaveFileName").val();
                    if (filename === "" || filename === "New!") {
                        _notification.show("Invalid file name","error");
                        return;
                    }
                    _dialog.close();

                    //filename += ";1";
                    // setup the new file name
                    const tabData = tabsObject.Tabs[currentTabIndex];

                    $.observable(tabData).setProperty("Name", filename);
                    $.observable(tabData).setProperty("FullName", `${tabData.Path}/${filename}`);

                    saveTab(currentTabIndex); // TODO async!!
                }
                if (e === "Cancel") {
                    _dialog.close();
                }
            });
        }

        function removeTab(index) {
            const tabId = tabsObject.Tabs[index].TabId;
            removeFromRecentOrder(tabId);
            
            if (index === currentTabIndex) {
                $.observable(tabsObject.Tabs).remove(index);
                const lastTab = $('#myTabs a:last');
                lastTab.tab('show');
            } else {
                $.observable(tabsObject.Tabs).remove(index);
            }
        }

        $myTabs.on("mouseenter",
            ".aCloseButton",
            function() {
                $(this).removeClass("far").addClass("fas");
            });
        $myTabs.on("mouseleave",
            ".aCloseButton",
            function() {
                $(this).removeClass("fas").addClass("far");
            });

        $("#myDisks").on("click",
            ".aDisk",
            function() {
                const disk = $(this).text();
                if (breadCrumb[0].toLowerCase() === disk.toLowerCase()) return;
                changeFolder(disk);
            });

        $("#myBreadCrumb").on("click",
            ".aCrumb",
            function() {
                const index = $(this).data("index");
                const fullName = breadCrumb.slice(0, index + 1).join("/");
                changeFolder(fullName);
            });
        $gotos.on("click",
            ".aGoto",
            function () {
                const fullName = $(this).text();
                changeFolder(fullName);
            });

        $myFiles.on("click",
            ".aRow",
            function(event) {
                const isFolder = $(this).find("a").hasClass("aFolder");
                if (isFolder) {
                    handleFolder($(this).find("a").text());
                } else {
                    event.preventDefault();

                    const position = $(this).offset();


                    _$fileTd = $(this).find("td");
                    _fileName = $(this).find("span").text();
                    _$fileTd.css('background-color', 'yellow');

                    // Show the popup menu near the clicked link
                    $('#sharedPopupMenu').css({
                        top: position.top + $(this).height(),
                        left: position.left
                    }).addClass('show');

                    $('body').append('<div class="modal-backdrop"></div>');


                }
            });

        $(document).on('click', function (event) {
            if (!$(event.target).closest('.aRow').length) {
                $('#sharedPopupMenu').removeClass('show');
                $('.modal-backdrop').remove();
                if(_$fileTd !== null) _$fileTd.css('background-color', '');
                _$fileTd = null;
            }
        });
        
        $(document).ready(function () {
            $("#popupEdit").on('click', function () {
                addFile(_fileName);
            });
            $("#popupCopy").on('click', function () {
                alert("Copy not implemented yet");
            });
            $("#popupRename").on('click', function () {
                alert("Rename not implemented yet");
            });
            $("#popupDelete").on('click', function () {
                alert("Delete not implemented yet");
            });
            $("#popupCompareFirst").on('click', function () {
                _compareFirst = `${breadCrumb.join("/")}/${_fileName}`;
                $popupCompareTo.text(`Compare to: ${_compareFirst}`);
                $popupCompareTo.removeClass('d-none');
            });
            $popupCompareTo.on('click', async function () {
                let compareSecond = `${breadCrumb.join("/")}/${_fileName}`;
                await compareTwoFilesAsync(_compareFirst, compareSecond);
            });
        });


        //--------------------------------------------------------

        function saveTab(index) {
            const tabData = tabsObject.Tabs[index];
            const file = tabData.FullName;
            saveFile(file, tabData);
        }

        window.onDocumentChanged = function() {
            if (currentTabData.Modified === true) return;
            $.observable(currentTabData).setProperty("Modified", true);
            // enable the compare unsaved button
            setupUnsavedBtn();
        };
        
        function setupUnsavedBtn() {
            if (currentTabData.Modified && currentTabData.Name !== "New!") {
                $compareUnsavedBtn
                    .removeClass("disabled")
                    .removeAttr("aria-disabled")
                    .removeAttr("tabindex");
            } else {
                $compareUnsavedBtn
                    .addClass("disabled")
                    .attr("aria-disabled", "true")
                    .attr("tabindex", "-1");
            }
        }

        function handleFolder(folder) {
            const fullName = `${breadCrumb.join("/")}/${folder}`;
            changeFolder(fullName);
        }

        function addRecent(folder) {
            const newObject = {Name: folder};
            if (_recents.contains(newObject)) return;

            _recents.push(newObject);


            _recents.sort(function (a, b) {
                const nameA = a.Name.toLowerCase();
                const nameB = b.Name.toLowerCase();
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
                return 0;
            });

            const htmlOutput = recentsTemplate.render(_recents);
            $gotos.html(htmlOutput);
            //alert(folder);
        }

        async function compareContentAsync(firstFile, secondFile, info1, info2, firstContent, secondContent) {
                console.log("attempting to create unifiedDiff");
                // Compute the diff in unified format
                const unifiedDiff = window.Diff.createTwoFilesPatch(
                    firstFile,
                    secondFile,
                    firstContent,
                    secondContent,
                    info1,
                    info2,
                    { context: 3 }
                );


                console.log("attempting to generate html from diff");

                const diffHtml = Diff2Html.html(unifiedDiff, {
                    drawFileList: false,
                    matching: 'lines',
                    outputFormat: 'side-by-side' // or 'line-by-line'
                });

                console.log("attempting to create a window");
                const newWin = window.open('', '', 'width=1000,height=800,resizable=yes,scrollbars=yes');
                if (!newWin) {
                    hideLoading("#two");
                    alert("Popup blocked. Please allow popups for this site.");
                    return;
                }

                newWin.document.write(`
  <html lang="">
    <head>
      <title>Diff Output</title>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/diff2html/bundles/css/diff2html.min.css" />
    </head>
    <body>
      ${diffHtml}
    </body>
  </html>
`);

                newWin.document.close();
        }
        

        async function compareTwoFilesAsync(firstFile, secondFile) {
            try {
                showLoading("#two");
                
                console.log(firstFile);
                let firstContent = await loadFileAsync(firstFile);
                console.log(secondFile);
                let secondContent = await loadFileAsync(secondFile);
                
                await compareContentAsync(firstFile, secondFile, "", "", firstContent, secondContent);
                hideLoading("#two");


            } catch (err) {
                hideLoading("#two");
                alert('Error comparing files: ' + err.message);
            }
        }

        async function compareUnsavedAsync(firstFile, secondContent) {
            try {
                showLoading("#two");

                console.log(firstFile);
                const firstContent = await loadFileAsync(firstFile);

                // convert \n to \r\n
                const output = secondContent.replace(/\r?\n/g, "\r\n");
                
                await compareContentAsync(firstFile, "", "ORIGINAL", "UNSAVED", firstContent, output);
                hideLoading("#two");


            } catch (err) {
                hideLoading("#two");
                alert('Error comparing files: ' + err.message);
            }
        }

        async function compareRecentAsync(firstFile, secondFile, firstContent, secondContent) {
            try {
                showLoading("#two");
                
                await compareContentAsync(firstFile, secondFile, "", "", firstContent, secondContent);
                hideLoading("#two");


            } catch (err) {
                hideLoading("#two");
                alert('Error comparing recent tabs: ' + err.message);
            }
        }

        function addFile(file) {
            const fullName = `${breadCrumb.join("/")}/${file}`;
            addRecent(`${breadCrumb.join("/")}`)

            if (isOpenAlready(fullName)) return;

            const tabData = {
                "Path": breadCrumb.join("/"),
                "Name": file,
                "FullName": fullName,
                "TabId": `tab${tabCount}`,
                "Modified": false
            };

            tabCount++;

            $.observable(tabsObject.Tabs).insert(tabData);
            tabsObject.RecentOrder.push(tabData.TabId);
            if (tabsObject.RecentOrder.length > 1) {
                $compareBtn
                    .removeClass("disabled")
                    .removeAttr("aria-disabled")
                    .attr("tabindex", "-1");
            }

            const insertedTab = $('#myTabs a:last');
            insertedTab.tab('show');

            loadFile(fullName, tabData);
        }

        function addNewFile(file) {
            const fullName = `${breadCrumb.join("/")}/${file}`;

            const tabData = {
                "Path": breadCrumb.join("/"),
                "Name": file,
                "FullName": fullName,
                "TabId": `tab${tabCount}`,
                "Modified": true
            };

            tabCount++;

            $.observable(tabsObject.Tabs).insert(tabData);
            tabsObject.RecentOrder.push(tabData.TabId);
            if (tabsObject.RecentOrder.length > 1) {
                $compareBtn
                    .removeClass("disabled")
                    .removeAttr("aria-disabled")
                    .attr("tabindex", "-1");
            }

            const insertedTab = $('#myTabs a:last');
            insertedTab.tab('show');
            tabData.View = openVmsEditor.load("", "#" + tabData.TabId + " div");

        }

        const gutterStyle = () => ({
            'flex-basis': `${GUTTER_SIZE}px`
        });
        const elementStyle = (dimension, size) => ({
            'flex-basis': `calc(${size}% - ${GUTTER_SIZE}px)`
        });

        Split(['#one', '#two'],
            {
                sizes: [100, 300],
                minSize: 10,
                elementStyle,
                gutterStyle
            });

        window.onbeforeunload = function() {
            return true;
        };

        function isOpenAlready(fullName) {
            let found = false;
            let tabId = "";
            $.each(tabsObject.Tabs, function(index, obj) {
                if (obj.FullName === fullName) {
                    found = true;
                    tabId = obj.TabId;
                    return false;
                }
            });
            if (found) {
                _notification.show("This file is already open","info", 4000);
                $("#" + tabId + "-tab").tab("show");
                return true;
            }
            return false;
        }

        function equalIgnoreCase(a, b) {
            return a.localeCompare(b, undefined, { sensitivity: 'accent' }) === 0;
        }

        function getFileNameNoVersion(text) {
            const index = text.indexOf(";");
            if (index === -1) return text;
            return text.substring(0, index);
        }

        function saveFile(file, tabData) {
            try {
                const  fileNameNoVersion = getFileNameNoVersion(tabData.Name);
                const data = JSON.stringify(tabData.View.state.doc.toString());

                showLoading("#two");
                $.ajax({
                    type: 'POST',
                    url: `${apiBase}/save?path=${encodeURIComponent(file)}`,
                    dataType: 'text',
                    contentType: "application/json",
                    data: data,
                    success: function(data, status, xhr) {
                        hideLoading("#two");
                        if (status === 'success') {
                            if (data !== "") {
                                // update with the new name
                                $.observable(tabData).setProperty("Name", data);
                                $.observable(tabData).setProperty("FullName", `${tabData.Path}/${data}`);
                            }
                            $.observable(tabData).setProperty("Modified", false);
                            setupUnsavedBtn();

                            // insert into the file list the new name
                            console.log(breadCrumb.join("/") + " === " + tabData.Path + " : " +
                                (breadCrumb.join("/") === tabData.Path));

                            if (breadCrumb.join("/") === tabData.Path && data !== "") {
                                const selector = $(`#myFiles span[nameNoVer='${fileNameNoVersion}'`).first();
                                const tr = selector.closest('tr');
                                const testHtml = fileTemplate.render(tabData);
                                if (tr.length === 0) {
                                    $myFiles.append(testHtml);
                                    return;
                                }
                                const showHistory = $showHistory.is(':checked');
                                if (showHistory) {
                                    tr.before(testHtml);
                                } else {
                                    tr.replaceWith(testHtml);
                                }
                            }
                        } else {
                            alert("err");
                            alert(xhr.responseText);
                        }
                    },
                    error: function(xhr) {
                        hideLoading("#two");
                        alert("response:" + xhr.responseText);
                    }
                });
            } catch (exception) {
                hideLoading("#two");
                alert(exception);
            }
        }


        async function loadFileAsync(file) {
            const response = await fetch(`${apiBase}/file?path=${encodeURIComponent(file)}`, {
                method: 'POST'
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.log("Response failed: " + errorText);
                throw new Error(errorText);
            }

            return await response.text();
        }
         
        function loadFile(file, tabData) {
            try {
                showLoading("#two");
                $.ajax({
                    type: 'POST',
                    url: `${apiBase}/file?path=${encodeURIComponent(file)}`,
                    dataType: 'text',
                    success: function(data, status, xhr) {
                        hideLoading("#two");
                        if (status === 'success') {
                            tabData.View = openVmsEditor.load(data, "#" + tabData.TabId + " div");
                        } else {
                            alert("err");
                            alert(xhr.responseText);
                        }
                    },
                    error: function(xhr) {
                        hideLoading("#two");
                        alert("response:" + xhr.responseText);
                    }
                });
            } catch (exception) {
                hideLoading("#two");
                alert(exception);
            }
        }

        function showLoading(selector) {
            $(selector).LoadingOverlay("show",
                {
                    minSize: 30,
                    maxSize: 30,
                    fade: false,
                    background: "rgba(0,0,0,0.1)"

                });
            $("#bodyBlock").css("display", "block");
        }

        function hideLoading(selector) {
            $(selector).LoadingOverlay("hide");
            $("#bodyBlock").css("display", "none");
        }
 
        function changeRecentOrder(tabId) {
            const index = tabsObject.RecentOrder.indexOf(tabId);
            if (index !== -1) {
                tabsObject.RecentOrder.splice(index, 1);      // Remove from current position
                tabsObject.RecentOrder.push(tabId);           // Add to end
            }
        }
        
        function removeFromRecentOrder(tabId) {
            const index = tabsObject.RecentOrder.indexOf(tabId);
            if (index !== -1) {
                tabsObject.RecentOrder.splice(index, 1);      // Remove from current position
            }
            if (tabsObject.RecentOrder.length < 2) {
                $compareBtn
                    .addClass("disabled")
                    .attr("aria-disabled", "true")
                    .attr("tabindex", "-1");
            }
        }
        
        function changeFolder(folder) {
            try {
                showLoading("#one");
                const include = $include.val();
                const exclude = $exclude.val();
                const showHistory = $showHistory.is(':checked');

                $.ajax({
                    type: 'POST',
                    url: `${apiBase}/folder?include=${encodeURIComponent(include)}&exclude=${encodeURIComponent(exclude)}&showHistory=${showHistory}&path=${encodeURIComponent(folder)}`,
                    dataType: 'json',
                    success: function(data, status, xhr) {
                        hideLoading("#one");
                        if (status === 'success') {
                            $.observable(breadCrumb).refresh(data.BreadCrumb);

                            files = data.Files;
                            const htmlOutput = folderTemplate.render(files);
                            $myFiles.html(htmlOutput);
                        } else {
                            console.log(xhr.responseText);
                            _notification.show("Goto folder was not found: " + folder, "error");
                        }
                    },
                    error: function(xhr) {
                        hideLoading("#one");
                        console.log(xhr.responseText);
                        _notification.show("Goto folder was not found: " + folder, "error");
                    }
                });
            } catch (exception) {
                hideLoading("#one");
                console.log(exception);
                _notification.show("Goto folder was not found: " + folder, "error");
            }
        }

        $myTabs.on('shown.bs.tab',
            function(e) {
                currentTabIndex = $.view(e.target).index;
                currentTabData = tabsObject.Tabs[currentTabIndex];

                // fix up the recent tab order
                changeRecentOrder(currentTabData.TabId);
                
                // set up the compare unsaved button
                setupUnsavedBtn();
                // prove we have the correct data alert(currentTabData.Name);
            });

        $(function() {
            $('[data-bs-toggle="tooltip"]').tooltip();
        });
    </script>
    }

    <div class="container-fluid">
        <div id="bodyBlock"></div>
        <div class="row">
            <div class="col-md-12">



            <nav class="navbar navbar-expand-lg bg-dark-subtle ">
                <div class="container-fluid">
                    
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            
                            <li class="dropdown">
                                <button class="btn btn-outline-secondary dropdown-toggle d-flex align-items-center"
                                        type="button"
                                        id="userMenu"
                                        data-bs-toggle="dropdown"
                                        aria-expanded="false">
                                    <span >Account</span>
                                </button>

                                <ul class="dropdown-menu dropdown-menu-start" aria-labelledby="userMenu">
                                    <li>
                                        <h6 class="dropdown-header">@username</h6>
                                    </li>
                                    <hr class="dropdown-divider"/>
                                    <li>
                                        <a class="dropdown-item" asp-area="Identity" asp-page="/Account/Manage/Index" target="_blank" rel="noopener noreferrer">Manage Account</a>
                                    </li>
                                    <li><hr class="dropdown-divider" /></li>
                                    <li>
                                        <form asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@returnUrl" method="post">
                                            <button type="submit" class="dropdown-item">Logout</button>
                                        </form>
                                    </li>
                                </ul>
                            </li>                    
                                
                            <li class="nav-item dropdown ps-3">
                                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    Drives
                                </a>
                                <ul id="myDisks" class="dropdown-menu" aria-labelledby="navbarDropdown">
                                </ul>
                            </li>


                            <li class="nav-item ps-3">
                                <div class="row g-1 align-items-center">
                                    <div class="col-auto">
                                        <label for="include" class="col-form-label">Include</label>
                                    </div>
                                    <div class="col-auto">
                                        <input id="include" class="form-control" type="text" aria-label="exclude" value="@Model.Include"
                                               data-bs-toggle="tooltip" data-bs-placement="bottom" title="Use a comma to separate additional excludes">
                                    </div>
                                </div>
                            </li>

                            <li class="nav-item ps-3">
                                <div class="row g-1 align-items-center">
                                    <div class="col-auto">
                                        <div class="form-check mt-2">
                                                                                         <input class="form-check-input" type="checkbox" id="showHistory" @(Model.ShowHistory ? "checked" : "")>
                                            <label class="form-check-label" for="showHistory">
                                                Show History
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </li>

                        </ul>

                        <div class="col-auto ps-3 pe-1">
                            <label for="goto" class="col-form-label">Goto</label>
                        </div>
                        <div class="col pe-5">
                            <div class="dropdown input-group col-12">
                                <input id="goto" class="form-control" type="text" data-bs-toggle="dropdown"/>
                                <ul id="gotos" class="dropdown-menu">
                                </ul>
                                <button class="btn btn-outline-secondary" type="button" id="btn-goto">Go</button>
                            </div>
                        </div>

                        <div class="btn-group">
                            <button type="button" id="saveBtn" class="btn btn-primary" data-bs-display="static">Save</button>
                            <button type="button" class="btn  btn-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                <span class="visually-hidden">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a id="saveAsBtn" class="dropdown-item" href="#">Save As</a></li>
                                <li><a id="newBtn" class="dropdown-item" href="#">New</a></li>
                                <hr class="dropdown-divider">
                                <li>
                                    <a id="compareBtn" class="dropdown-item disabled" href="#" tabindex="-1" aria-disabled="true"
                                       data-bs-toggle="tooltip" data-bs-placement="left" title="Compare the two most recent tabs">Compare Tabs</a></li>
                                <li>
                                    <a id="compareUnsavedBtn" class="dropdown-item disabled" href="#" tabindex="-1" aria-disabled="true"
                                       data-bs-toggle="tooltip" data-bs-placement="left" title="Compare the unsaved changes to saved">Compare Unsaved</a></li>
                            </ul>
                        </div>


                    </div>
                </div>
            </nav>

            </div>
        </div>

        <div class="row g-1" style="height: 30px;">
            <div class="col col-auto ps-3 py-0">
                    Breadcrumb:
            </div>
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol id="myBreadCrumb" class="breadcrumb">
                    </ol>
                </nav>
            </div>
        </div>

        <div class="mainDiv">


            <div class="flex" style="height: 100%;">
                <section id="one" class="card" style="overflow: auto;">
                    <div class="card-body">
                        <table class="table table-sm">
                            <thead>
                            <tr>
                                <th>FileName</th>
                                <th style="width: 100%;">Date</th>
                            </tr>
                            </thead>
                            <tbody id="myFiles">
                            </tbody>
                        </table>
                    </div>
                </section>

                <div id="two" class="card">
                    <div id="myTabArea" class="card-body">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="hack"></div>

<div class="dropdown-menu" id="sharedPopupMenu">
    <a class="dropdown-item" id="popupEdit" href="#">Edit</a>
    <a class="dropdown-item" id="popupCopy" href="#">Copy</a>
    <a class="dropdown-item" id="popupRename" href="#">Rename</a>
    <a class="dropdown-item" id="popupDelete" href="#">Delete</a>
    <hr class="dropdown-divider">
    <a class="dropdown-item" id="popupCompareFirst" href="#">Compare First</a>
    <a class="dropdown-item d-none" id="popupCompareTo" href="#">Compare</a>
</div>
