@using System.Text.Json
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@model OpenVmsTextEditor.Domain.Models.VmsEditorModel
@{
    ViewBag.Title = "OpenVmsEditor";
    Layout = "_Layout";
}
@section Styles
{
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css" integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ" crossorigin="anonymous" asp-append-version="true">
    <style>
        body {
            margin-bottom: 0;
        }

        td {
            white-space: nowrap;
        }

        .mainDiv {
            height: calc(100vh - 100px);
        }

        .flex {
            display: flex;
            flex-direction: row;
        }

        .cm-editor {
            height: calc(100vh - 190px);
            border-left: 1px solid #ddd;
            border-right: 1px solid #ddd;
            border-bottom: 1px solid #ddd;
        }

        .cm-scroller {
            overflow: auto;
        }

        .aRow:hover {
            cursor: pointer;
            background-color: lightgray;
        }

        #bodyBlock {
            position: fixed;
            display: none;
            width: 100%;
            height: 100%;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 2;
        }

        .modal-backdrop {
            background-color: rgba(0, 0, 0, 0.1);
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 2;
        }
    </style>
}
@section Scripts
{
    <script src="~/lib/split.js/split.min.js" asp-append-version="true"></script>
    <script src="~/lib/jsviews/jsviews.min.js" asp-append-version="true"></script>
    <script src="~/lib/gasparesganga-jquery-loading-overlay/dist/loadingoverlay.min.js" asp-append-version="true"></script>
    <script src="~/js/openVmsEditor.bundle.js" asp-append-version="true"></script>

    <script id="diskTemplate" type="text/x-jsrender">
        {{for #data}}
        <a class="aDisk dropdown-item" href="#">{{:#data}}</a>
        {{/for}}
    </script>

    <script id="recentsTemplate" type="text/x-jsrender">
        {{for #data}}
        <li><a class="dropdown-item aGoto" href="#">{{:Name}}</a></li>
        {{/for}}
    </script>

    <script id="folderTemplate" type="text/x-jsrender">
        {{for #data}}
        <tr class="aRow">
            <td>
                {{if Dir}}
                <a class="aFolder" href="#">{{:Name}}</a>
                {{else}}
                <span {{noVer:Name}}>{{:Name}}</span>
                {{/if}}
            </td>
            <td></td>
        </tr>
        {{/for}}
    </script>

    <script id="fileTemplate" type="text/x-jsrender">
        <tr class="aRow">
            <td>
                <span {{noVer:Name}}>{{:Name}}</span>
            </td>
            <td></td>
        </tr>
    </script>

    <script id="breadCrumbTemplate" type="text/x-jsrender">
        {{for #data}}
        <li class="breadcrumb-item"><a data-index="{{:#getIndex()}}" class="aCrumb" href="#">{{:#data}}</a></li>
        {{/for}}
    </script>

    <script id="tabTemplate" type="text/x-jsrender">

        <!-- Nav tabs -->
        <ul id="myTabs" class="nav nav-tabs">
            {^{for Tabs}}
            <li class="nav-item">
                <a class="nav-link" id="{{:TabId}}-tab" data-bs-toggle="tab" data-bs-target="#{{:TabId}}">{^{modCode:Modified}}{^{:Name}} <i class="aCloseButton far fa-window-close"></i></a>
            </li>
            {{/for}}
        </ul>

        <div id="myTabsContent" class="tab-content">
            {^{for Tabs}}
            <div id="{{:TabId}}" class="tab-pane">
                <div></div><div>{^{:FullName}}</div>
            </div>
            {{/for}}
        </div>
    </script>



    <script>
        $.views.converters("modCode",
            function(val) {
                if (val === true) {
                    return "*";
                }
                return "";
            });

        $.views.converters("noVer",
            function(text) {
                var index = text.indexOf(";");
                if (index !== -1) {
                    return `nameNoVer='${text.substring(0, index)}'`;
                }
                    return `nameNoVer='${text}'`;
            });

        const GUTTER_SIZE = 20;
        var tabCount = 1;
        var currentTabIndex = 0;
        var currentTabData = null;
        var _$fileTd = null
        var _notification = new MakaroSoft.CommonNotification();
        var _dialog = new MakaroSoft.CommonDialog( { required: true });

        var includeValue = "@ViewBag.Include";
        var excludeValue = "@ViewBag.Exclude";
        var gotoValue = "";

        var disks = @Html.Raw(JsonSerializer.Serialize(Model.Disks));
        var files = @Html.Raw(JsonSerializer.Serialize(Model.Files));
        var _recents = [];

        disks.contains = function (name) {
            return this.some(function (diskName) {
                return diskName.toLowerCase() === name.toLowerCase();
            });
        };
        _recents.contains = function (newObject) {
            return this.some(function (obj) {
                return obj.Name === newObject.Name;
            });
        };

        var breadCrumb = @Html.Raw(JsonSerializer.Serialize(Model.BreadCrumb));
        var tabsObject = {
            "Tabs": tabs = []
        };

        var fileTemplate = $.templates("#fileTemplate");

        var diskTemplate = $.templates("#diskTemplate");
        diskTemplate.link("#myDisks", disks);

        var folderTemplate = $.templates("#folderTemplate");
        var htmlOutput = folderTemplate.render(files);
        $("#myFiles").html(htmlOutput);

        var recentsTemplate = $.templates("#recentsTemplate");
        htmlOutput = recentsTemplate.render(_recents);
        $("#gotos").html(htmlOutput);

        var breadCrumbTemplate = $.templates("#breadCrumbTemplate");
        breadCrumbTemplate.link("#myBreadCrumb", breadCrumb);

        var tabTemplate = $.templates("#tabTemplate");
        tabTemplate.link("#myTabArea", tabsObject);

        var $include = $("#include");
        var $exclude = $("#exclude");
        var $goto = $("#goto");
        var $btnGoto = $("#btn-goto");
        var $showHistory = $("#showHistory")

        $include.on('blur',
            function () {
                if ($include.val() !== includeValue) {
                    includeValue = $include.val();
                    var fullName = breadCrumb.join("/");
                    changeFolder(fullName);
                }
            });

        $include.on('keyup',
            function(e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    if ($include.val() !== includeValue) {
                        includeValue = $include.val();
                        var fullName = breadCrumb.join("/");
                        changeFolder(fullName);
                    }
                }
            });

        $exclude.on('blur',
            function () {
                if ($exclude.val() !== excludeValue) {
                    excludeValue = $exclude.val();
                    var fullName = breadCrumb.join("/");
                    changeFolder(fullName);
                }
            });

        $exclude.on('keyup',
            function (e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    if ($exclude.val() !== excludeValue) {
                        excludeValue = $exclude.val();
                        var fullName = breadCrumb.join("/");
                        changeFolder(fullName);
                    }
                }
            });





        $goto.on('blur',
            function () {
                if ($goto.val() !== gotoValue) {
                    gotoValue = $goto.val();
                    handleGoto(gotoValue);
                }
            });

        $goto.on('keyup',
            function (e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    gotoValue = $goto.val();
                    handleGoto(gotoValue);
                }
            });

        $btnGoto.click(function () {
            gotoValue = $goto.val();
            handleGoto(gotoValue);
        });

        function isDisk(possibleDisk) {
            return disks.contains(possibleDisk);
            return false;
        }

        function handleGoto(folder) {
            if (folder === "") return;

            if (folder.startsWith("/")) {
                // tack on the current drive name
                folder = breadCrumb[0] + folder;
            } else {
                var folderParts = folder.split("/");
                if (folderParts.length === 0) return;
                var possibleDisk = folderParts[0];
                if (!isDisk(possibleDisk)) {
                    var fullPath = breadCrumb.join("/");
                    folder = fullPath + "/" + folder;
                }
            }

            // todo handle different goto folder scenarios
            changeFolder(folder);
        }

        $showHistory.on('change',
            function () {
                var fullPath = breadCrumb.join("/");
                changeFolder(fullPath);
            });

        $("#myTabs").on("click",
            ".aCloseButton",
            function(event) {
                event.stopPropagation();
                var dataItem = $.view(this).data;
                var index = $.view(this).index;
                if (dataItem.Modified) {
                    if (dataItem.Name === "New!") {
                        removeTabNew(index, dataItem);
                    } else {
                        removeTabExisting(index, dataItem);
                    }
                } else {
                    removeTab(index);
                }
            });

        function removeTabExisting(index, dataItem) {
            _dialog.show(`Remove Tab For ${dataItem.Name}`, "Do you want to save your changes first?", ["Yes","No","Cancel"], function(e) {
                _dialog.close();
                if (e === "Yes") {
                    saveTab(index); // TODO async!!
                    removeTab(index);
                }
                if (e === "No") {
                    removeTab(index);
                }
            });
        }

            function removeTabNew(index, dataItem) {
                _dialog.show(`Remove Tab For ${dataItem.Name}`, "Enter the file name to save as <input id='btnRemoveNewTab' class='form-control' placeHolder='filename.filetype' type='text'></input>", ["Save","Remove","Cancel"], function(e) {
                if (e === "Save") {
                    var filename = $("#btnRemoveNewTab").val();
                    if (filename === "" || filename === "New!") {
                        _notification.show("Invalid file name","error");
                        return;
                    }
                    _dialog.close();

                    //filename += ";1";

                    // setup the new file name
                    var tabData = tabsObject.Tabs[index];
                    $.observable(tabData).setProperty("Name", filename);
                    $.observable(tabData).setProperty("FullName", `${tabData.Path}/${filename}`);

                    saveTab(index); // TODO async!!
                    removeTab(index);
                }
                if (e === "Remove") {
                    _dialog.close();
                    removeTab(index);
                }
                if (e === "Cancel") {
                    _dialog.close();
                }
            });
        }

        $("#saveBtn").click(function() {
            if (!currentTabData.Modified) return;

            if (currentTabData.Name === "New!") {
                doSaveAs();
                return;
            }
            _dialog.show("Save Changes", "Do you want to save your changes?", ["Yes","Cancel"], function(e) {
                _dialog.close();
                if (e == "Yes") {
                    saveTab(currentTabIndex);
                }
            });


        });
        $("#saveAsBtn").click(function () {
            doSaveAs();
        });

        $("#newBtn").click(function () {
                addNewFile("New!");
        });

        function doSaveAs() {
            if (!currentTabData.Modified) return;
            _dialog.show("Save As", "Enter the file name to save as <input id='btnDoSaveFileName' class='form-control' placeHolder='filename.filetype' type='text'></input>", ["Save","Cancel"], 
            function(e) {
                if (e == "Save") {
                    var filename = $("#btnDoSaveFileName").val();
                    if (filename === "" || filename === "New!") {
                        _notification.show("Invalid file name","error");
                        return;
                    }
                    _dialog.close();

                    //filename += ";1";
                    // setup the new file name
                    var tabData = tabsObject.Tabs[currentTabIndex];

                    $.observable(tabData).setProperty("Name", filename);
                    $.observable(tabData).setProperty("FullName", `${tabData.Path}/${filename}`);

                    saveTab(currentTabIndex); // TODO async!!
                }
                if (e == "Cancel") {
                    _dialog.close();
                }
            });
        }

        function removeTab(index) {
            if (index === currentTabIndex) {
                $.observable(tabsObject.Tabs).remove(index);
                var lastTab = $('#myTabs a:last');
                lastTab.tab('show');
            } else {
                $.observable(tabsObject.Tabs).remove(index);
            }
        }

        $("#myTabs").on("mouseenter",
            ".aCloseButton",
            function() {
                $(this).removeClass("far").addClass("fas");
            });
        $("#myTabs").on("mouseleave",
            ".aCloseButton",
            function() {
                $(this).removeClass("fas").addClass("far");
            });

        $("#myDisks").on("click",
            ".aDisk",
            function() {
                var disk = $(this).text();
                if (breadCrumb[0].toLowerCase() === disk.toLowerCase()) return;
                changeFolder(disk);
            });

        $("#myBreadCrumb").on("click",
            ".aCrumb",
            function() {
                var index = $(this).data("index");
                var fullName = breadCrumb.slice(0, index + 1).join("/");
                changeFolder(fullName);
            });
        $("#gotos").on("click",
            ".aGoto",
            function (event) {
                var fullName = $(this).text();
                changeFolder(fullName);
            });

        $("#myFiles").on("click",
            ".aRow",
            function(event) {
                var isFolder = $(this).find("a").hasClass("aFolder");
                if (isFolder) {
                    handleFolder($(this).find("a").text());
                } else {
                    event.preventDefault();

                    var position = $(this).offset();


                    _$fileTd = $(this).find("td");
                    _fileName = $(this).find("span").text()
                    _$fileTd.css('background-color', 'yellow');

                    // Show the popup menu near the clicked link
                    $('#sharedPopupMenu').css({
                        top: position.top + $(this).height(),
                        left: position.left
                    }).addClass('show');

                    $('body').append('<div class="modal-backdrop"></div>');


                }
            });

        $(document).on('click', function (event) {
            if (!$(event.target).closest('.aRow').length) {
                $('#sharedPopupMenu').removeClass('show');
                $('.modal-backdrop').remove();
                if(_$fileTd !== null) _$fileTd.css('background-color', '');
                _$fileTd = null;
            }
        });
        
        $(document).ready(function () {
            $("#popupEdit").on('click', function () {
                addFile(_fileName);
            });
            $("#popupCopy").on('click', function () {
                alert("Copy not implemented yet");
            });
            $("#popupRename").on('click', function () {
                alert("Rename not implemented yet");
            });
            $("#popupDelete").on('click', function () {
                alert("Delete not implemented yet");
            });
        });


        //--------------------------------------------------------

        function saveTab(index) {
            var tabData = tabsObject.Tabs[index];
            var file = tabData.FullName;
            saveFile(file, tabData);
        }

        window.onDocumentChanged = function() {
            if (currentTabData.Modified === true) return;
            $.observable(currentTabData).setProperty("Modified", true);
        };

        function handleFolder(folder) {
            var fullName = `${breadCrumb.join("/")}/${folder}`;
            changeFolder(fullName);
        };

        function addRecent(folder) {
            var newObject = { Name: folder }
            if (_recents.contains(newObject)) return;

            _recents.push(newObject);


            _recents.sort(function (a, b) {
                var nameA = a.Name.toLowerCase();
                var nameB = b.Name.toLowerCase();
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
                return 0;
            });

            var htmlOutput = recentsTemplate.render(_recents);
            $("#gotos").html(htmlOutput);
            //alert(folder);
        };

        function addFile(file) {
            var fullName = `${breadCrumb.join("/")}/${file}`;
            addRecent(`${breadCrumb.join("/")}`)

            if (isOpenAlready(fullName)) return;

            var tabData = {
                "Path": breadCrumb.join("/"),
                "Name": file,
                "FullName": fullName,
                "TabId": `tab${tabCount}`,
                "Modified": false
            }

            tabCount++;

            $.observable(tabsObject.Tabs).insert(tabData);

            var insertedTab = $('#myTabs a:last');
            insertedTab.tab('show');

            loadFile(fullName, tabData);
        };

        function addNewFile(file) {
            var fullName = `${breadCrumb.join("/")}/${file}`;

            var tabData = {
                "Path": breadCrumb.join("/"),
                "Name": file,
                "FullName": fullName,
                "TabId": `tab${tabCount}`,
                "Modified": true
            }

            tabCount++;

            $.observable(tabsObject.Tabs).insert(tabData);

            var insertedTab = $('#myTabs a:last');
            insertedTab.tab('show');
            tabData.View = openVmsEditor.load("", "#" + tabData.TabId + " div");

        };

        const gutterStyle = dimension => ({
            'flex-basis': `${GUTTER_SIZE}px`
        });
        const elementStyle = (dimension, size) => ({
            'flex-basis': `calc(${size}% - ${GUTTER_SIZE}px)`
        });

        Split(['#one', '#two'],
            {
                sizes: [100, 300],
                minSize: 10,
                elementStyle,
                gutterStyle
            });

        window.onbeforeunload = function() {
            return true;
        };

        function isOpenAlready(fullName) {
            var found = false;
            var tabId = "";
            $.each(tabsObject.Tabs, function(index, obj) {
                if (obj.FullName === fullName) {
                    found = true;
                    tabId = obj.TabId;
                    return false;
                }
            });
            if (found) {
                _notification.show("This file is already open","info", 4000);
                $("#" + tabId + "-tab").tab("show");
                return true;
            }
            return false;
        }

        function equalIgnoreCase(a, b) {
            return a.localeCompare(b, undefined, { sensitivity: 'accent' }) === 0;
        }

        function fileNameNoVersion(text) {
            var index = text.indexOf(";");
            if (index === -1) return text;
            return text.substring(0, index);
        }

        function saveFile(file, tabData) {
            try {
                var fileNameNoVers = fileNameNoVersion(tabData.Name);
                var data = JSON.stringify(tabData.View.state.doc.toString());

                showLoading("#two");
                $.ajax({
                    type: 'POST',
                    url: `VmsEditor/saveFile?path=${file}`,
                    dataType: 'text',
                    contentType: "application/json",
                    data: data,
                    success: function(data, status, xhr) {
                        hideLoading("#two");
                        if (status === 'success') {
                            if (data !== "") {
                                // update with the new name
                                $.observable(tabData).setProperty("Name", data);
                                $.observable(tabData).setProperty("FullName", `${tabData.Path}/${data}`);
                            }
                            $.observable(tabData).setProperty("Modified", false);

                            // insert into the file list the new name
                            console.log(breadCrumb.join("/") + " === " + tabData.Path + " : " +
                                (breadCrumb.join("/") === tabData.Path));

                            if (breadCrumb.join("/") === tabData.Path && data !== "") {
                                var selector = $(`#myFiles span[nameNoVer='${fileNameNoVers}'`).first();
                                var tr = selector.closest('tr');
                                var testHtml = fileTemplate.render(tabData);
                                if (tr.length === 0) {
                                    $("#myFiles").append(testHtml);
                                    return;
                                }
                                var showHistory = $("#showHistory").is(':checked');
                                if (showHistory) {
                                    tr.before(testHtml);
                                } else {
                                    tr.replaceWith(testHtml);
                                }
                            }
                        } else {
                            alert("err");
                            alert(xhr.responseText);
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        hideLoading("#two");
                        alert("response:" + xhr.responseText);
                    }
                });
            } catch (exception) {
                hideLoading("#two");
                alert(exception);
            }
        }

        function loadFile(file, tabData) {
            try {
                showLoading("#two");
                $.ajax({
                    type: 'POST',
                    url: `VmsEditor/GetFile?path=${file}`,
                    dataType: 'text',
                    success: function(data, status, xhr) {
                        hideLoading("#two");
                        if (status === 'success') {
                            tabData.View = openVmsEditor.load(data, "#" + tabData.TabId + " div");
                        } else {
                            alert("err");
                            alert(xhr.responseText);
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        hideLoading("#two");
                        alert("response:" + xhr.responseText);
                    }
                });
            } catch (exception) {
                hideLoading("#two");
                alert(exception);
            }
        }

        function showLoading(selector) {
            $(selector).LoadingOverlay("show",
                {
                    minSize: 30,
                    maxSize: 30,
                    fade: false,
                    background: "rgba(0,0,0,0.1)"

                });
            $("#bodyBlock").css("display", "block");
        }

        function hideLoading(selector) {
            $(selector).LoadingOverlay("hide");
            $("#bodyBlock").css("display", "none");
        }

        function changeFolder(folder) {
            try {
                showLoading("#one");
                var include = $("#include").val();
                var exclude = $("#exclude").val();
                var showHistory = $("#showHistory").is(':checked');

                $.ajax({
                    type: 'POST',
                    url: `VmsEditor/GetFolder?include=${include}&exclude=${exclude}&showHistory=${showHistory}&path=${folder}`,
                    dataType: 'json',
                    success: function(data, status, xhr) {
                        hideLoading("#one");
                        if (status === 'success') {
                            $.observable(breadCrumb).refresh(data.BreadCrumb);

                            files = data.Files;
                            var htmlOutput = folderTemplate.render(files);
                            $("#myFiles").html(htmlOutput);
                        } else {
                            console.log(xhr.responseText);
                            _notification.show("Goto folder was not found: " + folder, "error");
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        hideLoading("#one");
                        console.log(xhr.responseText);
                        _notification.show("Goto folder was not found: " + folder, "error");
                    }
                });
            } catch (exception) {
                hideLoading("#one");
                console.log(exception);
                _notification.show("Goto folder was not found: " + folder, "error");
            }
        }

        $('#myTabs').on('shown.bs.tab',
            function(e) {
                currentTabIndex = $.view(e.target).index;
                currentTabData = tabsObject.Tabs[currentTabIndex];
                // prove we have the correct data alert(currentTabData.Name);
            });

        $(function() {
            $('[data-bs-toggle="tooltip"]').tooltip();
        });
    </script>
    }

    <div class="container-fluid">
        <div id="bodyBlock"></div>
        <div class="row">
            <div class="col-md-12">




            <nav class="navbar navbar-expand-lg bg-dark-subtle ">
                <div class="container-fluid">
                    <a class="navbar-brand" href="#">OpenVMS Text Editor</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">


                            <li class="nav-item dropdown ps-3">
                                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    Drives
                                </a>
                                <ul id="myDisks" class="dropdown-menu" aria-labelledby="navbarDropdown">
                                </ul>
                            </li>


                            <li class="nav-item ps-3">
                                <div class="row g-1 align-items-center">
                                    <div class="col-auto">
                                        <label for="include" class="col-form-label">Include</label>
                                    </div>
                                    <div class="col-auto">
                                        <input id="include" class="form-control" type="text" aria-label="exclude" value="@ViewBag.Include"
                                               data-bs-toggle="tooltip" data-bs-placement="bottom" title="Use a comma to separate additional excludes">
                                    </div>
                                </div>
                            </li>

                            <li class="nav-item ps-3">
                                <div class="row g-1 align-items-center">
                                    <div class="col-auto">
                                        <label for="exclude" class="col-form-label">Exclude</label>
                                    </div>
                                    <div class="col-auto">
                                        <input id="exclude" class="form-control" type="text" aria-label="exclude" value="@ViewBag.Exclude"
                                               data-bs-toggle="tooltip" data-bs-placement="bottom" title="Use a comma to separate additional excludes">
                                    </div>
                                </div>
                            </li>

                            <li class="nav-item ps-3">
                                <div class="form-check mt-2">
                                    <input class="form-check-input" type="checkbox" id="showHistory" @ViewBag.ShowHistory>
                                    <label class="form-check-label" for="showHistory">
                                        Show History
                                    </label>
                                </div>
                            </li>

                            <li class="nav-item ps-3" style="width:600px;">
                                <div class="row g-1 align-items-center">
                                    <div class="col-auto">
                                        <label for="goto" class="col-form-label">Goto</label>
                                    </div>
                                    <div class="col">
                                        <div class="dropdown input-group">
                                            <input id="goto" class="form-control" type="text" data-bs-toggle="dropdown" />
                                            <ul id="gotos" class="dropdown-menu">
                                            </ul>
                                            <button class="btn btn-outline-secondary" type="button" id="btn-goto">Go</button>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        </ul>


                        <div class="btn-group">
                            <button type="button" id="saveBtn" class="btn btn-primary"  data-bs-display="static">Save</button>
                            <button type="button" class="btn  btn-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                <span class="visually-hidden">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a id="saveAsBtn" class="dropdown-item" href="#">Save As</a></li>
                                <li><a id="newBtn" class="dropdown-item" href="#">New</a></li>
                            </ul>
                        </div>



                    </div>
                </div>
            </nav>

            </div>
        </div>

        <div class="row g-1" style="height: 30px;">
            <div class="col col-auto ps-3 py-0">
                    Breadcrumb:
            </div>
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol id="myBreadCrumb" class="breadcrumb">
                    </ol>
                </nav>
            </div>
        </div>

        <div class="mainDiv">


            <div class="flex" style="height: 100%;">
                <section id="one" class="card" style="overflow: auto;">
                    <div class="card-body">
                        <table class="table table-sm">
                            <thead>
                            <tr>
                                <th>FileName</th>
                                <th style="width: 100%;">Date</th>
                            </tr>
                            </thead>
                            <tbody id="myFiles">
                            </tbody>
                        </table>
                    </div>
                </section>

                <div id="two" class="card">
                    <div id="myTabArea" class="card-body">
                    </div>
                </div>
            </div>
        </div>
    </div>

<div class="dropdown-menu" id="sharedPopupMenu">
    <a class="dropdown-item" id="popupEdit" href="#">Edit</a>
    <a class="dropdown-item" id="popupCopy" href="#">Copy</a>
    <a class="dropdown-item" id="popupRename" href="#">Rename</a>
    <a class="dropdown-item" id="popupDelete" href="#">Delete</a>
</div>
