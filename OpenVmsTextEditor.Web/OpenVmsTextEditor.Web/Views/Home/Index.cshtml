@using System.Text.Json
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@model OpenVmsTextEditor.Domain.Models.VmsEditorModel
@{
    ViewBag.Title = "OpenVmsEditor";
    Layout = "_Layout";
}
@section Styles
{
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.0/css/all.css" integrity="sha384-lZN37f5QGtY3VHgisS14W3ExzMWZxybE1SJSEsQp9S+oqd12jhcu+A56Ebc1zFSJ" crossorigin="anonymous" asp-append-version="true">
    <style>
        body {
            margin-bottom: 0;
        }

        td {
            white-space: nowrap;
        }

        .mainDiv {
            height: calc(100vh - 135px);
        }

        .flex {
            display: flex;
            flex-direction: row;
        }

        .cm-editor {
            height: calc(100vh - 225px);
            border-left: 1px solid #ddd;
            border-right: 1px solid #ddd;
            border-bottom: 1px solid #ddd;
        }

        .cm-scroller {
            overflow: auto;
        }

        .aRow:hover {
            cursor: pointer;
            background-color: lightgray;
        }

        #bodyBlock {
            position: fixed;
            display: none;
            width: 100%;
            height: 100%;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 2;
        }

        .modal-backdrop {
            background-color: rgba(0, 0, 0, 0.1);
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 2;
        }
    </style>
}
@section Scripts
{
    <script src="~/lib/split.js/split.min.js" asp-append-version="true"></script>
    <script src="~/lib/jsviews/jsviews.min.js" asp-append-version="true"></script>
    <script src="~/lib/gasparesganga-jquery-loading-overlay/dist/loadingoverlay.min.js" asp-append-version="true"></script>
    <script src="~/js/openVmsEditor.bundle.js" asp-append-version="true"></script>

    <script id="diskTemplate" type="text/x-jsrender">
        {{for #data}}
        <a class="aDisk dropdown-item" href="#">{{:#data}}</a>
        {{/for}}
    </script>

    <script id="folderTemplate" type="text/x-jsrender">
        {{for #data}}
        <tr class="aRow">
            <td>
                {{if Dir}}
                <a class="aFolder" href="#">{{:Name}}</a>
                {{else}}
                <span {{noVer:Name}}>{{:Name}}</span>
                {{/if}}
            </td>
            <td></td>
        </tr>
        {{/for}}
    </script>

    <script id="fileTemplate" type="text/x-jsrender">
        <tr class="aRow">
            <td>
                <span {{noVer:Name}}>{{:Name}}</span>
            </td>
            <td></td>
        </tr>
    </script>

    <script id="breadCrumbTemplate" type="text/x-jsrender">
        {{for #data}}
        <li class="breadcrumb-item"><a data-index="{{:#getIndex()}}" class="aCrumb" href="#">{{:#data}}</a></li>
        {{/for}}
    </script>

    <script id="tabTemplate" type="text/x-jsrender">

        <!-- Nav tabs -->
        <ul id="myTabs" class="nav nav-tabs">
            {^{for Tabs}}
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#{{:TabId}}">{^{modCode:Modified}}{^{:Name}} <i class="aCloseButton far fa-window-close"></i></a>
            </li>
            {{/for}}
        </ul>

        <div id="myTabsContent" class="tab-content">
            {^{for Tabs}}
            <div id="{{:TabId}}" class="tab-pane">
                <div></div><div>{^{:FullName}}</div>
            </div>
            {{/for}}
        </div>
    </script>



    <script>
        $.views.converters("modCode",
            function(val) {
                if (val === true) {
                    return "*";
                }
                return "";
            });

        $.views.converters("noVer",
            function(text) {
                var index = text.indexOf(";");
                if (index !== -1) {
                    return `nameNoVer='${text.substring(0, index)}'`;
                }
                return "";
            });

        const GUTTER_SIZE = 20;
        var tabCount = 1;
        var currentTabIndex = 0;
        var currentTabData = null;

        var includeValue = "@ViewBag.Include";
        var excludeValue = "@ViewBag.Exclude";

        var disks = @Html.Raw(JsonSerializer.Serialize(Model.Disks));
        var files = @Html.Raw(JsonSerializer.Serialize(Model.Files));
        var breadCrumb = @Html.Raw(JsonSerializer.Serialize(Model.BreadCrumb));
        var tabsObject = {
            "Tabs": tabs = []
        };

        var fileTemplate = $.templates("#fileTemplate");

        var diskTemplate = $.templates("#diskTemplate");
        diskTemplate.link("#myDisks", disks);

        var folderTemplate = $.templates("#folderTemplate");
        var htmlOutput = folderTemplate.render(files);
        $("#myFiles").html(htmlOutput);

        var breadCrumbTemplate = $.templates("#breadCrumbTemplate");
        breadCrumbTemplate.link("#myBreadCrumb", breadCrumb);

        var tabTemplate = $.templates("#tabTemplate");
        tabTemplate.link("#myTabArea", tabsObject);

        var $include = $("#include");
        var $exclude = $("#exclude");
        var $showHistory = $("#showHistory")

        $include.on('blur',
            function () {
                if ($include.val() !== includeValue) {
                    includeValue = $include.val();
                    var fullName = breadCrumb.join("/");
                    changeFolder(fullName);
                }
            });

        $include.on('keyup',
            function(e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    if ($include.val() !== includeValue) {
                        includeValue = $include.val();
                        var fullName = breadCrumb.join("/");
                        changeFolder(fullName);
                    }
                }
            });

        $exclude.on('blur',
            function () {
                if ($exclude.val() !== excludeValue) {
                    excludeValue = $exclude.val();
                    var fullName = breadCrumb.join("/");
                    changeFolder(fullName);
                }
            });

        $exclude.on('keyup',
            function (e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    if ($exclude.val() !== excludeValue) {
                        excludeValue = $exclude.val();
                        var fullName = breadCrumb.join("/");
                        changeFolder(fullName);
                    }
                }
            });
        $showHistory.on('change',
            function () {
                var fullName = breadCrumb.join("/");
                changeFolder(fullName);
            });

        $("#myTabs").on("click",
            ".aCloseButton",
            function(event) {
                event.stopPropagation();
                var dataItem = $.view(this).data;
                var index = $.view(this).index;
                if (dataItem.Modified) {
                    var modal = $('#myModal');
                    modal.attr('data-index', index);
                    modal.find('.modal-title').text(`Remove Tab For ${dataItem.Name}`);
                    modal.modal('show');
                } else {
                    removeTab(index);
                }
            });

        $("#saveBtn").click(function() {
            if (!currentTabData.Modified) return;
            var modal = $('#saveModal');
            modal.attr('data-index', currentTabIndex);
            modal.find('.modal-title').text(`Save Changes To ${currentTabData.Name}`);
            modal.modal('show');
        });

        function removeTab(index) {
            if (index === currentTabIndex) {
                $.observable(tabsObject.Tabs).remove(index);
                var lastTab = $('#myTabs a:last');
                lastTab.tab('show');
            } else {
                $.observable(tabsObject.Tabs).remove(index);
            }
        }

        $("#myTabs").on("mouseenter",
            ".aCloseButton",
            function() {
                $(this).removeClass("far").addClass("fas");
            });
        $("#myTabs").on("mouseleave",
            ".aCloseButton",
            function() {
                $(this).removeClass("fas").addClass("far");
            });

        $("#myDisks").on("click",
            ".aDisk",
            function() {
                var disk = $(this).text();
                if (breadCrumb[0].toLowerCase() === disk.toLowerCase()) return;
                changeFolder(disk);
            });

        $("#myBreadCrumb").on("click",
            ".aCrumb",
            function() {
                var index = $(this).data("index");
                var fullName = breadCrumb.slice(0, index + 1).join("/");
                changeFolder(fullName);
            });

        $("#myFiles").on("click",
            ".aRow",
            function(event) {
                var isFolder = $(this).find("a").hasClass("aFolder");
                if (isFolder) {
                    handleFolder($(this).find("a").text());
                } else {
                    event.preventDefault();

                    var position = $(this).offset();


                    _$fileTd = $(this).find("td");
                    _fileName = $(this).find("span").text()
                    _$fileTd.css('background-color', 'yellow');

                    // Show the popup menu near the clicked link
                    $('#sharedPopupMenu').css({
                        top: position.top + $(this).height(),
                        left: position.left
                    }).addClass('show');

                    $('body').append('<div class="modal-backdrop"></div>');


                }
            });

        $(document).on('click', function (event) {
            if (!$(event.target).closest('.aRow').length) {
                $('#sharedPopupMenu').removeClass('show');
                $('.modal-backdrop').remove();
                _$fileTd.css('background-color', '');
            }
        });
        
        $(document).ready(function () {
            $("#popupEdit").on('click', function () {
                addFile(_fileName);
            });
        });


        //--------------------------------------------------------
        function hideMyModal() {
            var myModal = $('#myModal');
            var index = parseInt(myModal.attr('data-index'));
            myModal.modal('hide');
            return index;
        }

        $("#btnModalNo").click(function() {
            var index = hideMyModal();
            removeTab(index);
        });

        $("#btnModalYes").click(function() {
            var index = hideMyModal();
            saveTab(index); // TODO async!!
            removeTab(index);
        });

        //--------------------------------------------------------
        function hideSaveModal() {
            var modal = $('#saveModal');
            var index = parseInt(modal.attr('data-index'));
            modal.modal('hide');
            return index;
        }

        $("#btnSaveModalYes").click(function() {
            var index = hideSaveModal();
            saveTab(index);
        });

        //--------------------------------------------------------

        function saveTab(index) {
            var tabData = tabsObject.Tabs[index];
            var file = tabData.FullName;
            saveFile(file, tabData);
        }

        window.onDocumentChanged = function() {
            if (currentTabData.Modified === true) return;
            $.observable(currentTabData).setProperty("Modified", true);
        };

        function handleFolder(folder) {
            var fullName = `${breadCrumb.join("/")}/${folder}`;
            changeFolder(fullName);
        };

        function addFile(file) {
            var fullName = `${breadCrumb.join("/")}/${file}`;

            var tabData = {
                "Path": breadCrumb.join("/"),
                "Name": file,
                "FullName": fullName,
                "TabId": `tab${tabCount}`,
                "Modified": false
            }
            tabCount++;

            $.observable(tabsObject.Tabs).insert(tabData);

            var insertedTab = $('#myTabs a:last');
            insertedTab.tab('show');

            loadFile(fullName, tabData);
        };

        const gutterStyle = dimension => ({
            'flex-basis': `${GUTTER_SIZE}px`
        });
        const elementStyle = (dimension, size) => ({
            'flex-basis': `calc(${size}% - ${GUTTER_SIZE}px)`
        });

        Split(['#one', '#two'],
            {
                sizes: [100, 300],
                minSize: 10,
                elementStyle,
                gutterStyle
            });

        window.onbeforeunload = function() {
            return true;
        };

        function equalIgnoreCase(a, b) {
            return a.localeCompare(b, undefined, { sensitivity: 'accent' }) === 0;
        }

        function fileNameNoVersion(text) {
            var index = text.indexOf(";");
            if (index === -1) return text;
            return text.substring(0, index);
        }

        function saveFile(file, tabData) {
            try {
                var fileNameNoVers = fileNameNoVersion(tabData.Name);
                var data = JSON.stringify(tabData.View.state.doc.toString());

                showLoading("#two");
                $.ajax({
                    type: 'POST',
                    url: `VmsEditor/saveFile?path=${file}`,
                    dataType: 'text',
                    contentType: "application/json",
                    data: data,
                    success: function(data, status, xhr) {
                        hideLoading("#two");
                        if (status === 'success') {
                            if (data !== "") {
                                // update with the new name
                                $.observable(tabData).setProperty("Name", data);
                                $.observable(tabData).setProperty("FullName", `${tabData.Path}/${data}`);
                            }
                            $.observable(tabData).setProperty("Modified", false);

                            // insert into the file list the new name
                            console.log(breadCrumb.join("/") + " === " + tabData.Path + " : " +
                                (breadCrumb.join("/") === tabData.Path));

                            if (breadCrumb.join("/") === tabData.Path && data !== "") {
                                var selector = $(`#myFiles span[nameNoVer='${fileNameNoVers}'`).first();
                                var tr = selector.closest('tr');
                                var testHtml = fileTemplate.render(tabData);
                                tr.before(testHtml);
                            }
                        } else {
                            alert("err");
                            alert(xhr.responseText);
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        hideLoading("#two");
                        alert("wth?");
                        alert("response:" + xhr.responseText);
                    }
                });
            } catch (exception) {
                hideLoading("#two");
                alert(exception);
            }
        }

        function loadFile(file, tabData) {
            try {
                showLoading("#two");
                $.ajax({
                    type: 'POST',
                    url: `VmsEditor/GetFile?path=${file}`,
                    dataType: 'text',
                    success: function(data, status, xhr) {
                        hideLoading("#two");
                        if (status === 'success') {
                            tabData.View = openVmsEditor.load(data, "#" + tabData.TabId + " div");
                        } else {
                            alert("err");
                            alert(xhr.responseText);
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        hideLoading("#two");
                        alert("wth?");
                        alert("response:" + xhr.responseText);
                    }
                });
            } catch (exception) {
                hideLoading("#two");
                alert(exception);
            }
        }

        function showLoading(selector) {
            $(selector).LoadingOverlay("show",
                {
                    minSize: 30,
                    maxSize: 30,
                    fade: false,
                    background: "rgba(0,0,0,0.1)"

                });
            $("#bodyBlock").css("display", "block");
        }

        function hideLoading(selector) {
            $(selector).LoadingOverlay("hide");
            $("#bodyBlock").css("display", "none");
        }

        function changeFolder(folder) {
            try {
                showLoading("#one");
                var include = $("#include").val();
                var exclude = $("#exclude").val();
                var showHistory = $("#showHistory").is(':checked');

                $.ajax({
                    type: 'POST',
                    url: `VmsEditor/GetFolder?include=${include}&exclude=${exclude}&showHistory=${showHistory}&path=${folder}`,
                    dataType: 'json',
                    success: function(data, status, xhr) {
                        hideLoading("#one");
                        if (status === 'success') {
                            $.observable(breadCrumb).refresh(data.BreadCrumb);

                            files = data.Files;
                            var htmlOutput = folderTemplate.render(files);
                            $("#myFiles").html(htmlOutput);
                        } else {
                            alert("err");
                            alert(xhr.responseText);
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        hideLoading("#one");
                        alert("wth?");
                        alert("response:" + xhr.responseText);
                    }
                });
            } catch (exception) {
                hideLoading("#one");
                alert(exception);
            }
        }

        $('#myTabs').on('shown.bs.tab',
            function(e) {
                currentTabIndex = $.view(e.target).index;
                currentTabData = tabsObject.Tabs[currentTabIndex];
                // prove we have the correct data alert(currentTabData.Name);
            });

        $(function() {
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
    }

    <div class="container-fluid">
        <div id="bodyBlock"></div>
        <div class="row">
            <div class="col-md-12">
                <nav class="navbar navbar-expand-lg navbar-light bg-light">
                    <a class="navbar-brand" href="#">OpenVMS Text Editor</a>
                    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <div class="collapse navbar-collapse" id="navbarSupportedContent">
                        <ul class="navbar-nav">
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Drives
                                </a>
                                <div id="myDisks" class="dropdown-menu" aria-labelledby="navbarDropdown">
                                </div>
                            </li>
                        </ul>


                        <div class="ml-md-3 form-inline">
                            <label class="mr-sm-2">Include</label>
                            <input id="include" class="form-control" type="text" placeholder="*.*" aria-label="include" value="@ViewBag.Include"
                                   data-toggle="tooltip" data-placement="bottom" title="Use a comma to separate additional includes">
                        </div>

                    <div class="ml-md-3 form-inline">
                        <label class="mr-sm-2">Exclude</label>
                        <input id="exclude" class="form-control" type="text" aria-label="exclude" value="@ViewBag.Exclude"
                               data-toggle="tooltip" data-placement="bottom" title="Use a comma to separate additional excludes">
                    </div>

                    <div class="ml-md-3 form-check-inline">
                        <input class="form-check-input" type="checkbox" id="showHistory" @ViewBag.ShowHistory>
                        <label class="form-check-label" for="showHistory">
                            Show History
                        </label>
                    </div>

                        <div class="ml-auto">










                        <!-- Example split danger button -->
                        <div class="btn-group">
                            <button type="button" class="btn btn-danger">Action</button>
                            <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                <span class="visually-hidden">Toggle Dropdown</span>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#">Action</a></li>
                                <li><a class="dropdown-item" href="#">Another action</a></li>
                                <li><a class="dropdown-item" href="#">Something else here</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#">Separated link</a></li>
                            </ul>
                        </div>









                            <button id="saveBtn" class="mr-auto btn btn-outline-secondary" data-toggle="tooltip" data-placement="bottom" title="Prompts to save the current tab if modified">Save</button>
                        </div>
                    </div>
                </nav>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <nav aria-label="breadcrumb">
                    <ol id="myBreadCrumb" class="breadcrumb">
                    </ol>
                </nav>
            </div>
        </div>

        <div class="mainDiv">


            <div class="flex" style="height: 100%;">
                <section id="one" class="card" style="overflow: auto;">
                    <div class="card-body">
                        <table class="table table-sm">
                            <thead>
                            <tr>
                                <th>FileName</th>
                                <th style="width: 100%;">Date</th>
                            </tr>
                            </thead>
                            <tbody id="myFiles">
                            </tbody>
                        </table>
                    </div>
                </section>

                <div id="two" class="card">
                    <div id="myTabArea" class="card-body">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="myModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Remove Tab</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Do you want to save your changes first?</p>
                </div>
                <div class="modal-footer">
                    <button id="btnModalYes" type="button" class="btn btn-primary">Yes</button>
                    <button id="btnModalNo" type="button" class="btn btn-secondary">No</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <div id="saveModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Save Changes</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Do you want to save your Changes?</p>
                </div>
                <div class="modal-footer">
                    <button id="btnSaveModalYes" type="button" class="btn btn-primary">Yes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
<div class="dropdown-menu" id="sharedPopupMenu">
    <a class="dropdown-item" id="popupEdit" href="#">Edit</a>
    <a class="dropdown-item" id="popupCopy" href="#">Copy</a>
    <a class="dropdown-item" id="popupRename" href="#">Rename</a>
    <a class="dropdown-item" id="popupDelete" href="#">Delete</a>
</div>
